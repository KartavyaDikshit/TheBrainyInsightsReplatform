generator client {
  provider = "prisma-client-js"
  output   = "../src/generated"
  envFiles = ["./.env"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================================================
// CORE CONTENT MODELS
// ================================================================

model Category {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  shortcode   String   @unique @db.VarChar(20)
  slug        String   @unique @db.VarChar(100)
  title       String   @db.VarChar(200)
  description String?  @db.Text
  icon        String?  @db.VarChar(100)
  featured    Boolean  @default(false)
  sortOrder   Int      @default(0) @map("sort_order")
  
  // SEO
  metaTitle       String? @map("meta_title") @db.VarChar(200)
  metaDescription String? @map("meta_description") @db.VarChar(300)
  
  // Status
  status      ContentStatus @default(PUBLISHED)
  
  // Analytics
  viewCount   BigInt   @default(0) @map("view_count")
  
  // Timestamps
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  translations CategoryTranslation[]
  reports      Report[]
  blogs        Blog[]

  @@index([status, featured, sortOrder])
  @@index([shortcode])
  @@map("categories")
}

model CategoryTranslation {
  id          String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  categoryId  String @map("category_id") @db.Uuid
  locale      String @db.VarChar(5)
  
  title       String @db.VarChar(200)
  description String? @db.Text
  slug        String @db.VarChar(100)
  
  metaTitle       String? @map("meta_title") @db.VarChar(200)
  metaDescription String? @map("meta_description") @db.VarChar(300)
  
  status      TranslationStatus @default(PUBLISHED)
  
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([categoryId, locale])
  @@index([locale, status])
  @@map("category_translations")
}

model Report {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  categoryId      String?   @map("category_id") @db.Uuid
  
  // Identifiers
  sku             String?   @unique @db.VarChar(50)
  slug            String    @unique @db.VarChar(150)
  
  // Basic Info
  title           String    @db.VarChar(500)
  description     String    @db.Text
  summary         String?   @db.Text
  
  // Report Details
  pages           Int       @default(0)
  publishedDate   DateTime  @map("published_date") @db.Date
  baseYear        Int?      @map("base_year")
  forecastPeriod  String?   @map("forecast_period") @db.VarChar(50)
  
  // Content
  tableOfContents String?   @map("table_of_contents") @db.Text
  methodology     String?   @db.Text
  keyFindings     String[]  @map("key_findings")
  
  // Market Data (JSON)
  marketData      Json?     @map("market_data") @db.JsonB
  keyPlayers      String[]  @map("key_players")
  regions         String[]
  
  // Categorization
  industryTags    String[]  @map("industry_tags")
  reportType      String?   @map("report_type") @db.VarChar(50)
  
  // SEO
  keywords        String[]
  metaTitle       String    @map("meta_title") @db.VarChar(500)
  metaDescription String    @map("meta_description") @db.VarChar(500)
  
  // Pricing (USD)
  singlePrice     Decimal?  @map("single_price") @db.Decimal(10,2)
  multiPrice      Decimal?  @map("multi_price") @db.Decimal(10,2)
  corporatePrice  Decimal?  @map("corporate_price") @db.Decimal(10,2)
  
  // Status & Features
  status          ContentStatus @default(DRAFT)
  featured        Boolean   @default(false)
  priority        Int       @default(0)
  
  // Analytics
  viewCount       BigInt    @default(0) @map("view_count")
  downloadCount   BigInt    @default(0) @map("download_count")
  
  // Ratings
  avgRating       Decimal?  @map("avg_rating") @db.Decimal(3,2)
  reviewCount     Int       @default(0) @map("review_count")
  
  // Timestamps
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  category      Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  translations  ReportTranslation[]
  reviews       ReportReview[]
  enquiries     Enquiry[]
  orderItems    OrderItem[]

  @@index([categoryId, status, featured])
  @@index([publishedDate, status])
  @@index([avgRating, reviewCount])
  @@index([industryTags], type: Gin)
  @@index([keywords], type: Gin)
  @@map("reports")
}

model ReportTranslation {
  id              String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  reportId        String @map("report_id") @db.Uuid
  locale          String @db.VarChar(5)
  
  title           String @db.VarChar(500)
  description     String @db.Text
  summary         String? @db.Text
  slug            String @db.VarChar(150)
  
  tableOfContents String? @map("table_of_contents") @db.Text
  methodology     String? @db.Text
  keyFindings     String[] @map("key_findings")
  
  metaTitle       String @map("meta_title") @db.VarChar(500)
  metaDescription String @map("meta_description") @db.VarChar(500)
  keywords        String[]
  
  status          TranslationStatus @default(DRAFT)
  
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  report Report @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@unique([reportId, locale])
  @@index([locale, status])
  @@map("report_translations")
}

// ================================================================
// USER MANAGEMENT
// ================================================================

model User {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String     @unique @db.VarChar(255)
  firstName   String?    @map("first_name") @db.VarChar(100)
  lastName    String?    @map("last_name") @db.VarChar(100)
  phone       String?    @db.VarChar(20)
  company     String?    @db.VarChar(200)
  country     String?    @db.VarChar(100)
  
  // Auth
  password    String?    @db.VarChar(255)
  emailVerified Boolean  @default(false) @map("email_verified")
  
  // Preferences
  preferredLanguage String? @map("preferred_language") @db.VarChar(5)
  newsletter  Boolean    @default(true)
  
  status      UserStatus @default(ACTIVE)
  lastLoginAt DateTime?  @map("last_login_at")
  
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")

  // Relations
  orders      Order[]
  enquiries   Enquiry[]
  reviews     ReportReview[]

  @@index([email, status])
  @@map("users")
}

model Admin {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String     @unique @db.VarChar(255)
  username     String     @unique @db.VarChar(100)
  firstName    String?    @map("first_name") @db.VarChar(100)
  lastName     String?    @map("last_name") @db.VarChar(100)
  
  password     String     @db.VarChar(255)
  role         AdminRole
  
  status       ContentStatus @default(ACTIVE)
  lastLoginAt  DateTime?  @map("last_login_at")
  
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  @@index([email, status])
  @@map("admins")
}

// ================================================================
// E-COMMERCE
// ================================================================

model Order {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String?     @map("user_id") @db.Uuid
  orderNumber String      @unique @map("order_number") @db.VarChar(50)
  
  // Customer Info
  customerEmail String   @map("customer_email") @db.VarChar(255)
  customerName  String   @map("customer_name") @db.VarChar(200)
  customerPhone String?  @map("customer_phone") @db.VarChar(20)
  
  // Amounts
  subtotal    Decimal     @db.Decimal(12, 2)
  discount    Decimal     @default(0) @db.Decimal(12, 2)
  total       Decimal     @db.Decimal(12, 2)
  currency    String      @default("USD") @db.VarChar(3)
  
  // Payment
  paymentMethod String?   @map("payment_method") @db.VarChar(50)
  paymentStatus String?   @map("payment_status") @db.VarChar(50)
  transactionId String?   @map("transaction_id") @db.VarChar(100)
  
  status      OrderStatus @default(PENDING)
  
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  // Relations
  user       User?       @relation(fields: [userId], references: [id])
  items      OrderItem[]

  @@index([customerEmail, status])
  @@index([createdAt])
  @@map("orders")
}

model OrderItem {
  id       String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderId  String      @map("order_id") @db.Uuid
  reportId String      @map("report_id") @db.Uuid
  
  licenseType LicenseType @map("license_type")
  price       Decimal     @db.Decimal(10, 2)
  quantity    Int         @default(1)

  order  Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  report Report @relation(fields: [reportId], references: [id])

  @@index([orderId])
  @@index([reportId])
  @@map("order_items")
}

// ================================================================
// CUSTOMER ENGAGEMENT
// ================================================================

model Enquiry {
  id        String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  reportId  String?       @map("report_id") @db.Uuid
  userId    String?       @map("user_id") @db.Uuid
  
  firstName String        @map("first_name") @db.VarChar(100)
  lastName  String?       @map("last_name") @db.VarChar(100)
  email     String        @db.VarChar(255)
  phone     String?       @db.VarChar(20)
  company   String?       @db.VarChar(200)
  country   String?       @db.VarChar(100)
  
  message   String?       @db.Text
  enquiryType String?     @map("enquiry_type") @db.VarChar(50)
  
  status      EnquiryStatus @default(NEW)
  
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  report Report? @relation(fields: [reportId], references: [id])
  user   User?         @relation(fields: [userId], references: [id])

  @@index([reportId, status])
  @@index([email])
  @@map("enquiries")
}

model ReportReview {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  reportId  String   @map("report_id") @db.Uuid
  userId    String?  @map("user_id") @db.Uuid
  
  rating    Int      @db.SmallInt
  title     String?  @db.VarChar(200)
  content   String?  @db.Text
  
  // Anonymous reviewer info
  reviewerName    String? @map("reviewer_name") @db.VarChar(100)
  reviewerCompany String? @map("reviewer_company") @db.VarChar(200)
  
  status    ContentStatus @default(PUBLISHED)
  verified  Boolean  @default(false)
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  report Report @relation(fields: [reportId], references: [id], onDelete: Cascade)
  user   User?  @relation(fields: [userId], references: [id])

  @@index([reportId, status])
  @@index([rating, verified])
  @@map("report_reviews")
}

// ================================================================
// CONTENT MODELS
// ================================================================

model Blog {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  categoryId    String?   @map("category_id") @db.Uuid
  
  title         String    @db.VarChar(300)
  slug          String    @unique @db.VarChar(150)
  excerpt       String?   @db.VarChar(500)
  content       String    @db.Text
  
  tags          String[]
  
  metaTitle       String? @map("meta_title") @db.VarChar(300)
  metaDescription String? @map("meta_description") @db.VarChar(500)
  
  status        ContentStatus @default(DRAFT)
  featured      Boolean   @default(false)
  
  viewCount     BigInt    @default(0) @map("view_count")
  
  publishedAt   DateTime? @map("published_at")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  category     Category? @relation(fields: [categoryId], references: [id])
  translations BlogTranslation[]

  @@index([categoryId, status])
  @@index([publishedAt])
  @@index([tags], type: Gin)
  @@map("blogs")
}

model BlogTranslation {
  id          String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  blogId      String @map("blog_id") @db.Uuid
  locale      String @db.VarChar(5)
  
  title       String @db.VarChar(300)
  slug        String @db.VarChar(150)
  excerpt     String? @db.VarChar(500)
  content     String @db.Text
  
  tags        String[]
  
  metaTitle       String? @map("meta_title") @db.VarChar(300)
  metaDescription String? @map("meta_description") @db.VarChar(500)
  
  status      TranslationStatus @default(DRAFT)
  
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@unique([blogId, locale])
  @@index([locale, status])
  @@map("blog_translations")
}

// ================================================================
// ENUMS
// ================================================================

enum ContentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  ACTIVE

  @@map("content_status")
}

enum UserStatus {
  PENDING
  ACTIVE
  INACTIVE
  SUSPENDED

  @@map("user_status")
}

enum AdminRole {
  SUPERADMIN
  MANAGER
  EDITOR

  @@map("admin_role")
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED

  @@map("order_status")
}

enum LicenseType {
  SINGLE
  MULTIPLE
  CORPORATE

  @@map("license_type")
}

enum EnquiryStatus {
  NEW
  CONTACTED
  QUALIFIED
  CONVERTED
  CLOSED

  @@map("enquiry_status")
}

enum TranslationStatus {
  DRAFT
  REVIEW
  APPROVED
  PUBLISHED

  @@map("translation_status")
}
